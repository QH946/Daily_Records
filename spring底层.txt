Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime, for example:
  @Configuration
  public class AppConfig {
 
      @Bean
      public MyBean myBean() {
          // instantiate, configure and return bean ...
      }
  }
Bootstrapping @Configuration classes
Via AnnotationConfigApplicationContext
@Configuration classes are typically bootstrapped using either AnnotationConfigApplicationContext or its web-capable variant, AnnotationConfigWebApplicationContext. A simple example with the former follows:
  AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
  ctx.register(AppConfig.class);
  ctx.refresh();
  MyBean myBean = ctx.getBean(MyBean.class);
  // use myBean ...
  
See the AnnotationConfigApplicationContext javadocs for further details, and see AnnotationConfigWebApplicationContext for web configuration instructions in a Servlet container.
Via Spring <beans> XML
As an alternative to registering @Configuration classes directly against an AnnotationConfigApplicationContext, @Configuration classes may be declared as normal <bean> definitions within Spring XML files:
  <beans>
     <context:annotation-config/>
     <bean class="com.acme.AppConfig"/>
  </beans>
  
In the example above, <context:annotation-config/> is required in order to enable ConfigurationClassPostProcessor and other annotation-related post processors that facilitate handling @Configuration classes.
Via component scanning
@Configuration is meta-annotated with @Component, therefore @Configuration classes are candidates for component scanning (typically using Spring XML's <context:component-scan/> element) and therefore may also take advantage of @Autowired/@Inject like any regular @Component. In particular, if a single constructor is present autowiring semantics will be applied transparently for that constructor:
  @Configuration
  public class AppConfig {
 
      private final SomeBean someBean;
 
      public AppConfig(SomeBean someBean) {
          this.someBean = someBean;
      }
 
      // @Bean definition using "SomeBean"
 
  }
@Configuration classes may not only be bootstrapped using component scanning, but may also themselves configure component scanning using the @ComponentScan annotation:
  @Configuration
  @ComponentScan("com.acme.app.services")
  public class AppConfig {
      // various @Bean definitions ...
  }
See the @ComponentScan javadocs for details.
Working with externalized values
Using the Environment API
Externalized values may be looked up by injecting the Spring org.springframework.core.env.Environment into a @Configuration class — for example, using the @Autowired annotation:
  @Configuration
  public class AppConfig {
 
      @Autowired Environment env;
 
      @Bean
      public MyBean myBean() {
          MyBean myBean = new MyBean();
          myBean.setName(env.getProperty("bean.name"));
          return myBean;
      }
  }
Properties resolved through the Environment reside in one or more "property source" objects, and @Configuration classes may contribute property sources to the Environment object using the @PropertySource annotation:
  @Configuration
  @PropertySource("classpath:/com/acme/app.properties")
  public class AppConfig {
 
      @Inject Environment env;
 
      @Bean
      public MyBean myBean() {
          return new MyBean(env.getProperty("bean.name"));
      }
  }
See the Environment and @PropertySource javadocs for further details.
Using the @Value annotation
Externalized values may be injected into @Configuration classes using the @Value annotation:
  @Configuration
  @PropertySource("classpath:/com/acme/app.properties")
  public class AppConfig {
 
      @Value("${bean.name}") String beanName;
 
      @Bean
      public MyBean myBean() {
          return new MyBean(beanName);
      }
  }
This approach is often used in conjunction with Spring's PropertySourcesPlaceholderConfigurer that can be enabled automatically in XML configuration via <context:property-placeholder/> or explicitly in a @Configuration class via a dedicated static @Bean method (see "a note on BeanFactoryPostProcessor-returning @Bean methods" of @Bean's javadocs for details). Note, however, that explicit registration of a PropertySourcesPlaceholderConfigurer via a static @Bean method is typically only required if you need to customize configuration such as the placeholder syntax, etc. Specifically, if no bean post-processor (such as a PropertySourcesPlaceholderConfigurer) has registered an embedded value resolver for the ApplicationContext, Spring will register a default embedded value resolver which resolves placeholders against property sources registered in the Environment. See the section below on composing @Configuration classes with Spring XML using @ImportResource; see the @Value javadocs; and see the @Bean javadocs for details on working with BeanFactoryPostProcessor types such as PropertySourcesPlaceholderConfigurer.
Composing @Configuration classes
With the @Import annotation
@Configuration classes may be composed using the @Import annotation, similar to the way that <import> works in Spring XML. Because @Configuration objects are managed as Spring beans within the container, imported configurations may be injected — for example, via constructor injection:
  @Configuration
  public class DatabaseConfig {
 
      @Bean
      public DataSource dataSource() {
          // instantiate, configure and return DataSource
      }
  }
 
  @Configuration
  @Import(DatabaseConfig.class)
  public class AppConfig {
 
      private final DatabaseConfig dataConfig;
 
      public AppConfig(DatabaseConfig dataConfig) {
          this.dataConfig = dataConfig;
      }
 
      @Bean
      public MyBean myBean() {
          // reference the dataSource() bean method
          return new MyBean(dataConfig.dataSource());
      }
  }
Now both AppConfig and the imported DatabaseConfig can be bootstrapped by registering only AppConfig against the Spring context:
  new AnnotationConfigApplicationContext(AppConfig.class);
With the @Profile annotation
@Configuration classes may be marked with the @Profile annotation to indicate they should be processed only if a given profile or profiles are active:
  @Profile("development")
  @Configuration
  public class EmbeddedDatabaseConfig {
 
      @Bean
      public DataSource dataSource() {
          // instantiate, configure and return embedded DataSource
      }
  }
 
  @Profile("production")
  @Configuration
  public class ProductionDatabaseConfig {
 
      @Bean
      public DataSource dataSource() {
          // instantiate, configure and return production DataSource
      }
  }
Alternatively, you may also declare profile conditions at the @Bean method level — for example, for alternative bean variants within the same configuration class:
  @Configuration
  public class ProfileDatabaseConfig {
 
      @Bean("dataSource")
      @Profile("development")
      public DataSource embeddedDatabase() { ... }
 
      @Bean("dataSource")
      @Profile("production")
      public DataSource productionDatabase() { ... }
  }
See the @Profile and org.springframework.core.env.Environment javadocs for further details.
With Spring XML using the @ImportResource annotation
As mentioned above, @Configuration classes may be declared as regular Spring <bean> definitions within Spring XML files. It is also possible to import Spring XML configuration files into @Configuration classes using the @ImportResource annotation. Bean definitions imported from XML can be injected — for example, using the @Inject annotation:
  @Configuration
  @ImportResource("classpath:/com/acme/database-config.xml")
  public class AppConfig {
 
      @Inject DataSource dataSource; // from XML
 
      @Bean
      public MyBean myBean() {
          // inject the XML-defined dataSource bean
          return new MyBean(this.dataSource);
      }
  }
With nested @Configuration classes
@Configuration classes may be nested within one another as follows:
  @Configuration
  public class AppConfig {
 
      @Inject DataSource dataSource;
 
      @Bean
      public MyBean myBean() {
          return new MyBean(dataSource);
      }
 
      @Configuration
      static class DatabaseConfig {
          @Bean
          DataSource dataSource() {
              return new EmbeddedDatabaseBuilder().build();
          }
      }
  }
When bootstrapping such an arrangement, only AppConfig need be registered against the application context. By virtue of being a nested @Configuration class, DatabaseConfig will be registered automatically. This avoids the need to use an @Import annotation when the relationship between AppConfig and DatabaseConfig is already implicitly clear.
Note also that nested @Configuration classes can be used to good effect with the @Profile annotation to provide two options of the same bean to the enclosing @Configuration class.
Configuring lazy initialization
By default, @Bean methods will be eagerly instantiated at container bootstrap time. To avoid this, @Configuration may be used in conjunction with the @Lazy annotation to indicate that all @Bean methods declared within the class are by default lazily initialized. Note that @Lazy may be used on individual @Bean methods as well.
Testing support for @Configuration classes
The Spring TestContext framework available in the spring-test module provides the @ContextConfiguration annotation which can accept an array of component class references — typically @Configuration or @Component classes.
  @RunWith(SpringRunner.class)
  @ContextConfiguration(classes = {AppConfig.class, DatabaseConfig.class})
  public class MyTests {
 
      @Autowired MyBean myBean;
 
      @Autowired DataSource dataSource;
 
      @Test
      public void test() {
          // assertions against myBean ...
      }
  }
See the TestContext framework  reference documentation for details.
Enabling built-in Spring features using @Enable annotations
Spring features such as asynchronous method execution, scheduled task execution, annotation driven transaction management, and even Spring MVC can be enabled and configured from @Configuration classes using their respective "@Enable" annotations. See @EnableAsync, @EnableScheduling, @EnableTransactionManagement, @EnableAspectJAutoProxy, and @EnableWebMvc for details.
Constraints when authoring @Configuration classes
Configuration classes must be provided as classes (i.e. not as instances returned from factory methods), allowing for runtime enhancements through a generated subclass.
Configuration classes must be non-final (allowing for subclasses at runtime), unless the proxyBeanMethods flag is set to false in which case no runtime-generated subclass is necessary.
Configuration classes must be non-local (i.e. may not be declared within a method).
Any nested configuration classes must be declared as static.
@Bean methods may not in turn create further configuration classes (any such instances will be treated as regular beans, with their configuration annotations remaining undetected).
Since:
3.0
See Also:
Bean, Profile, Import, ImportResource, ComponentScan, Lazy, PropertySource, AnnotationConfigApplicationContext, ConfigurationClassPostProcessor, org.springframework.core.env.Environment, org.springframework.test.context.ContextConfiguration
Author:
Rod Johnson, Chris Beams, Juergen Hoeller

--
Indicates that an annotated class is a "component". Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.
Other class-level annotations may be considered as identifying a component as well, typically a special kind of component: e.g. the @Repository annotation or AspectJ's @Aspect annotation.
Since:
2.5
See Also:
Repository, Service, Controller, org.springframework.context.annotation.ClassPathBeanDefinitionScanner
Author:
Mark Fisher
---------------------------------
Indicates that a method produces a bean to be managed by the Spring container.
Overview
The names and semantics of the attributes to this annotation are intentionally similar to those of the <bean/> element in the Spring XML schema. For example:
      @Bean
      public MyBean myBean() {
          // instantiate and configure MyBean obj
          return obj;
      }
  
Bean Names
While a name attribute is available, the default strategy for determining the name of a bean is to use the name of the @Bean method. This is convenient and intuitive, but if explicit naming is desired, the name attribute (or its alias value) may be used. Also note that name accepts an array of Strings, allowing for multiple names (i.e. a primary bean name plus one or more aliases) for a single bean.
      @Bean({"b1", "b2"}) // bean available as 'b1' and 'b2', but not 'myBean'
      public MyBean myBean() {
          // instantiate and configure MyBean obj
          return obj;
      }
  
Profile, Scope, Lazy, DependsOn, Primary, Order
Note that the @Bean annotation does not provide attributes for profile, scope, lazy, depends-on or primary. Rather, it should be used in conjunction with @Scope, @Lazy, @DependsOn and @Primary annotations to declare those semantics. For example:
      @Bean
      @Profile("production")
      @Scope("prototype")
      public MyBean myBean() {
          // instantiate and configure MyBean obj
          return obj;
      }
  
The semantics of the above-mentioned annotations match their use at the component class level: @Profile allows for selective inclusion of certain beans. @Scope changes the bean's scope from singleton to the specified scope. @Lazy only has an actual effect in case of the default singleton scope. @DependsOn enforces the creation of specific other beans before this bean will be created, in addition to any dependencies that the bean expressed through direct references, which is typically helpful for singleton startup. @Primary is a mechanism to resolve ambiguity at the injection point level if a single target component needs to be injected but several beans match by type.
Additionally, @Bean methods may also declare qualifier annotations and @Order values, to be taken into account during injection point resolution just like corresponding annotations on the corresponding component classes but potentially being very individual per bean definition (in case of multiple definitions with the same bean class). Qualifiers narrow the set of candidates after the initial type match; order values determine the order of resolved elements in case of collection injection points (with several target beans matching by type and qualifier).
NOTE: @Order values may influence priorities at injection points, but please be aware that they do not influence singleton startup order which is an orthogonal concern determined by dependency relationships and @DependsOn declarations as mentioned above. Also, javax.annotation.Priority is not available at this level since it cannot be declared on methods; its semantics can be modeled through @Order values in combination with @Primary on a single bean per type.
@Bean Methods in @Configuration Classes
Typically, @Bean methods are declared within @Configuration classes. In this case, bean methods may reference other @Bean methods in the same class by calling them directly. This ensures that references between beans are strongly typed and navigable. Such so-called 'inter-bean references' are guaranteed to respect scoping and AOP semantics, just like getBean() lookups would. These are the semantics known from the original 'Spring JavaConfig' project which require CGLIB subclassing of each such configuration class at runtime. As a consequence, @Configuration classes and their factory methods must not be marked as final or private in this mode. For example:
  @Configuration
  public class AppConfig {
 
      @Bean
      public FooService fooService() {
          return new FooService(fooRepository());
      }
 
      @Bean
      public FooRepository fooRepository() {
          return new JdbcFooRepository(dataSource());
      }
 
      // ...
  }
@Bean Lite Mode
@Bean methods may also be declared within classes that are not annotated with @Configuration. For example, bean methods may be declared in a @Component class or even in a plain old class. In such cases, a @Bean method will get processed in a so-called 'lite' mode.
Bean methods in lite mode will be treated as plain factory methods by the container (similar to factory-method declarations in XML), with scoping and lifecycle callbacks properly applied. The containing class remains unmodified in this case, and there are no unusual constraints for the containing class or the factory methods.
In contrast to the semantics for bean methods in @Configuration classes, 'inter-bean references' are not supported in lite mode. Instead, when one @Bean-method invokes another @Bean-method in lite mode, the invocation is a standard Java method invocation; Spring does not intercept the invocation via a CGLIB proxy. This is analogous to inter-@Transactional method calls where in proxy mode, Spring does not intercept the invocation — Spring does so only in AspectJ mode.
For example:
  @Component
  public class Calculator {
      public int sum(int a, int b) {
          return a+b;
      }
 
      @Bean
      public MyBean myBean() {
          return new MyBean();
      }
  }
Bootstrapping
See the @Configuration javadoc for further details including how to bootstrap the container using AnnotationConfigApplicationContext and friends.
BeanFactoryPostProcessor-returning @Bean methods
Special consideration must be taken for @Bean methods that return Spring BeanFactoryPostProcessor (BFPP) types. Because BFPP objects must be instantiated very early in the container lifecycle, they can interfere with processing of annotations such as @Autowired, @Value, and @PostConstruct within @Configuration classes. To avoid these lifecycle issues, mark BFPP-returning @Bean methods as static. For example:
      @Bean
      public static PropertySourcesPlaceholderConfigurer pspc() {
          // instantiate, configure and return pspc ...
      }
  
By marking this method as static, it can be invoked without causing instantiation of its declaring @Configuration class, thus avoiding the above-mentioned lifecycle conflicts. Note however that static @Bean methods will not be enhanced for scoping and AOP semantics as mentioned above. This works out in BFPP cases, as they are not typically referenced by other @Bean methods. As a reminder, an INFO-level log message will be issued for any non-static @Bean methods having a return type assignable to BeanFactoryPostProcessor.
Since:
3.0
See Also:
Configuration, Scope, DependsOn, Lazy, Primary, org.springframework.stereotype.Component, org.springframework.beans.factory.annotation.Autowired, org.springframework.beans.factory.annotation.Value
Author:
Rod Johnson, Costin Leau, Chris Beams, Juergen Hoeller, Sam Brannen