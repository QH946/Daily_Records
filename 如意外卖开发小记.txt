1.改名瑞吉外卖为如意外卖Ruyi_Takeaway
2.外卖课周一到五每天两小时，周末各四小时起步（跟着敲几节后自己实现后端）
若有精力，则额外肝一小时vue

2.如果是使用MybatisPlus代码生成器的小伙伴注意一下记得在实体类里面加上@TableField(fill = FieldFill.INSERT)
和@TableField(fill = FieldFill.INSERT_UPDATE)注解，不然实现后面的功能，打断点调试的时候
自定义元数据对象处理器会起不了作用，无法自动填充导致数据库抛500异常


3.引用面试
今天面试，面试官针对我简历写了这个瑞吉【当然包装改了个名字】，
问如果只剩下一道锅包肉，厨师不做了，这时候，张三点了份锅包肉，
李四也点了份锅包肉，但是现在只剩下一份了，这种情况如何处理呢？
如何保证数据的统一，不出现重复和负数

最简单的实现方式就是利用MP的乐观锁配置。
也可以采用redis的信号量来判断商品的库存量。
使用乐观锁来处理。假设每次请求都能读到所有数据，然后使用乐观锁将version作为修改的条件，
一个用户对数据进行修改后version就自增使得另外一个用户要进行修改时version不一致修改不了

4.
@RestController = @ResponseBody ＋ @Controller  合在一起的作用。
如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面或者html，配置的视图解析器 
（即jsp/thymeleaf项目中需要页面跳转则使用@Controller）
InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。
若前端发送json型数据，后端接收时，需要在方法参数前加入@RequestBody注解
public R<Employee> login(HttpServletRequest request, @RequestBody Employee employee)


5.
SpringBoot 分为四层：controller层、service层、dao层、model(entity)层

controller层：控制层，存放各种控制器，来提供数据或者返回界面，实现对Get和Post的相应，用于前后端交互，service层和前端通过Controller层进行数据交互。导入service层，调用service方法，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表。表单等交互动作的处理，调到Service，将Service层的数据对象返回到视图层。

service层：业务逻辑层，存放业务逻辑处理，返回数据给控制调用，一般用于调用dao层的接口，实现业务功能，不直接对数据库进行操作，有接口和接口实现类，提供controller层调用的方法，调用dao层访问数据库。

dao层：mapper层，数据持久层，对数据库进行持久化操作，用于存放sql语句，存放返回数据json的格式样式，在SpringBoot中用注解来为每一个方法注入sql语句。他的方法是针对数据库操作的，基本用到的就是增删改查。它只是个接口，只有方法名字，具体实现在mapper.xml中。

model(entity)层：数据访问层，实体类包，存放各种与数据库对应的实体类。属性值与数据库中的属性值保持一致。 实现set和get方法。

为何分层？

高内聚：分层的设计可以简化系统设计，让不同的层专注做某一模块的事
低耦合：层与层之间通过接口或API来交互，依赖方不用知道被依赖方的细节
复用：分层之后可以做到很高的复用
扩展性：分层架构可以让我们更容易做横向扩展
分层是为了使业务逻辑更加清晰，写代码更加方便，所以有时候也需要根据具体情况来，但是大体的都是这样处理的，因为它其实就是提供一种规则，让你把相同类型的代码放在一起，这样就形成了层次，从而达到分层解耦、复用、便于测试和维护的目的。

6.判断用GetMapping还是PostMapping
前端F12，根据Request Method后面的内容决定

7.开发具体业务前，再log前打断点debug
log.info("page = {},pageSize = {},name = {}", page, pageSize, name);
判断能否正常接收到自定义方法中的参数
public R<Page> page(int page, int pageSize, String name)

8.
10年客户端开发程序员给各位同学一些建议吧，这组视频，老师的处理方式是对的，但是，只是一个课件和课程，方便大家了解后段开发流程，我有如下心得和建议给正在学习的学弟们：
1.学习的过程中思考如果这里有1000个请求甚至更多这样处理合理吗？
2.如果这里逻辑更复杂，条件更多，该如何处理或者优化？
3.这样处理后相应时间是增加了还是减少了，如果，要让请求响应变快，如何优化？
4.spring框架很强大，那它内部如何实现这么高级的功能？
5.如果自己要实现一个框架，该如何？
6.JAVA 受这么多人青睐，它强大在哪里？我们需要用其他语言替换吗？为什么？
7.夯实计算机基础，数据结构与算法。

9.
@Select注解的目的是为了取代xml中的select标签，只作用于方法上面。下面看一下@Select注解的源码介绍：

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface Select
{
    String[] value();
}

从上述可以看到两点信息：

（1）@Select注解只能修饰方法
（2）@Select注解的值是字符数组。

所以，@Select注解的用法是这样的：

@Select({ "select * from xxx", "select * from yyy" })
Person selectPersonById(Integer id);

虽然@Select注解的值是字符数组，但是真正生效的应该是最后那条SQL语句。这一点请大家要留意一下。

2、@Select注解动态SQL拼写
普通的字符串值，只能实现变量的替换功能，如下所示，

@Select("select * from t_person where id = #{id}")
Person selectPersonById(Integer id);

如果要想实现复杂的逻辑判断，则需要使用标签，如下所示：

@Select("<script> select * from t_person where id = #{id} 
<when test='address !=null'> and address = #{address} 
</when> </script>")
Person selectPersonById(Integer id);
其实，标签并非是@Select注解专用的，其他的注解，例如@Insert，@Update等等，都可以使用的。

10.service层中，
//查询菜品基本信息，从dish表查询
        Dish dish = this.getById(id);
 this.getById(id);等价于DishService.getById(id);   
 
11.@SuppressWarnings 一部分是给编译器提供元信息, 抑制部分特殊警告; 还有的是IDE扩展的很多检查规则.

不建议 @SuppressWarnings("all")
12.interface 中方法默认就是 public 的, 变量默认 public static final
如套餐service中
 /**
     * 新增套餐并保存套餐与菜品的关联关系
     *
     * @param setmealDto
     */
     void saveWithDish(SetmealDto setmealDto);

    /**
     * 删除套餐，同时需要删除套餐和菜品的关联数据
     *
     * @param ids
     */
     void removeWithDish(List<Long> ids);
无需再带public
     
13.idea快捷键补充
ctrl+D复制上一行
ctrl+Y删除当前行
shift+enter按当前缩进换行
14.
在Linux中的vi、vim编辑模式中查找关键字的方法：

1、进入vi中，编辑模式中先按下键盘上"esc"跳转成命令输入模式

2、输入斜杠"/"，这时屏幕会跳转到底部，输入栏出现"/"

3、输入你需要查找的关键字，回车键

4、如果要继续查找下一个关键字，输入n

5、查找上一个关键字，输入N（大写）
15.为防止记录混乱，则规定日后数据库密码为对应数据库名称
mysql的使用root
mongodb的密码为mongo
redis的密码为redis

16.编程风格
仅每个小模块（行为）间使用空行

/**
     * 根据条件查询对应的菜品数据
     *
     * @param dish
     * @return
     */
    @GetMapping("/list")
    public R<List<DishDto>> list(Dish dish) {
        List<DishDto> dishDtoList = null;
        //动态构造key-dish_1397844391040167938_1
        String key = "dish_" + dish.getCategoryId() + "_" + dish.getStatus();
        //先从dish中获取缓存数据
        dishDtoList = (List<DishDto>) redisTemplate.opsForValue().get(key);
        if (dishDtoList != null) {
            //如果存在直接返回，无需查询数据库
            return R.success(dishDtoList);
        }

        //构造查询条件
        LambdaQueryWrapper<Dish> lambdaQueryWrapper = new LambdaQueryWrapper<>();
        //添加条件，查询状态为1的（起售状态）
        lambdaQueryWrapper.eq(Dish::getStatus, 1);
        lambdaQueryWrapper.eq(dish.getCategoryId() != null, Dish::getCategoryId, dish.getCategoryId());
        //条件排序条件
        lambdaQueryWrapper.orderByAsc(Dish::getSort).orderByDesc(Dish::getUpdateTime);
        List<Dish> list = dishService.list(lambdaQueryWrapper);

        dishDtoList = list.stream().map((item) -> {
            DishDto dishDto = new DishDto();
            BeanUtils.copyProperties(item, dishDto);
            Long categoryId = item.getCategoryId();
            //根据id查分类对象
            Category category = categoryService.getById(categoryId);
            if (category != null) {
                String categoryName = category.getName();
                dishDto.setCategoryName(categoryName);
            }
            //当前菜品id
            Long dishId = item.getId();
            LambdaQueryWrapper<DishFlavor> queryWrapper = new LambdaQueryWrapper<>();
            queryWrapper.eq(DishFlavor::getDishId, dishId);
            //SQL: select* from dishflavor where dish_id=?;
            List<DishFlavor> dishFlavorlist = dishFlavorService.list(queryWrapper);
            dishDto.setFlavors(dishFlavorlist);
            return dishDto;
        }).collect(Collectors.toList());

        //如果不存在，需要查询数据库，将查询到的菜品数据缓存到Redis
        redisTemplate.opsForValue().set(key, dishDtoList, 60, TimeUnit.MINUTES);

        return R.success(dishDtoList);
    }
    
17.规范
冰凝 19:06:19
你写完就会发现IDEA应该会有个警告: 泛型类的原始使用 这类的

冰凝 19:07:15
如果不写, 相当于 R<Object>,  API文档工具也没法给你出响应结构文档

冰凝 19:07:27
如果实在懒得写, 建议 R<?>
 /**
     * 根据id查询地址
     */
    @ApiOperation("获取地址列表")
    @GetMapping("/{id}")
    public R<?> get(@PathVariable Long id) {
        AddressBook addressBook = addressBookService.getById(id);
        if (addressBook != null) {
            return R.success(addressBook);
        } else {
            return R.error("没有找到该对象");
        }
    }
18.多任务视图：alt+tab   ＋方向键可随意切换（
实测比鼠标效率高，且预防鼠标手）
19.快速修改配置文件
win+R后输入文件路径
如D:/hadoop/hbase-1.2.6/conf/hbase-site.xml
20.安装软件时，尽量避免安装路径带有空格及中文
如系统自带的文件夹
D:\Program Files
D:\Program Files (x86)
自己创建
D:\Softwares
D:\Tools
D:\Test
D:\Practice
D:\Note
D:\Frame
D:\Family
20.
session存在服务器内存中
cookie存在浏览器中
1.context就是“容器”，放的就是应用程序的所有资源，要用时候就访问它，所以context里面的东西，在同一个应用程序里面是全局的；web上下文可以看成web应用的运行环境，一般用context名字来修饰，里面保存了web应用相关的一些设置和全局变量

2.ServletContext,是一个全局的储存信息的空间，服务器开始，其就存在，服务器关闭，其才释放。request，一个用户可有多个；session，一个用户一个；而servletContext，所有用户共用一个。所以，为了节省空间，提高效率，ServletContext中，要放必须的、重要的、所有用户需要共享的线程又是安全的一些信息；
HttpSession session =request.getSession();
session.getServletContext();
3.JavaWeb中的上下文环境概念就是：一个web服务启动后的整个服务中的所有内存对象和他们之间的关系组成的一种环境

spring 上下文和spring mvc上下文和web应用上下文servletContext之间的关系
要想很好理解这三个上下文的关系，需要先熟悉spring是怎样在web容器中启动起来的。spring的启动过程其实就是其IoC容器的启动过程，对于web程序，IoC容器启动过程即是建立上下文的过程。

spring的启动过程：
首先，对于一个web应用，其部署在web容器中，web容器提供其一个全局的上下文环境，这个上下文就是ServletContext，其为后面的spring IoC容器提供宿主环境；

其次，在web.xml中会提供有contextLoaderListener。在web容器启动时，会触发容器初始化事件，此时contextLoaderListener会监听到这个事件，其contextInitialized方法会被调用，在这个方法中，spring会初始化一个启动上下文，这个上下文被称为根上下文，即WebApplicationContext，这是一个接口类，确切的说，其实际的实现类是XmlWebApplicationContext。这个就是spring的IoC容器，其对应的Bean定义的配置由web.xml中的context-param标签指定。在这个IoC容器初始化完毕后，spring以WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE为属性Key，将其存储到ServletContext中，便于获取；

再次，contextLoaderListener监听器初始化完毕后，开始初始化web.xml中配置的Servlet，这个servlet可以配置多个，以最常见的DispatcherServlet为例，这个servlet实际上是一个标准的前端控制器，用以转发、匹配、处理每个servlet请求。DispatcherServlet上下文在初始化的时候会建立自己的IoC上下文，用以持有spring mvc相关的bean。在建立DispatcherServlet自己的IoC上下文时，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE先从ServletContext中获取之前的根上下文(即WebApplicationContext)作为自己上下文的parent上下文。有了这个parent上下文之后，再初始化自己持有的上下文。这个DispatcherServlet初始化自己上下文的工作在其initStrategies方法中可以看到，大概的工作就是初始化处理器映射、视图解析等。这个servlet自己持有的上下文默认实现类也是mlWebApplicationContext。初始化完毕后，spring以与servlet的名字相关(此处不是简单的以servlet名为Key，而是通过一些转换，具体可自行查看源码)的属性为属性Key，也将其存到ServletContext中，以便后续使用。这样每个servlet就持有自己的上下文，即拥有自己独立的bean空间，同时各个servlet共享相同的bean，即根上下文(第2步中初始化的上下文)定义的那些bean。

21.
ctrl+alt按住
鼠标左键点击接口可查看实现类
22.使用//TODO注释
可标记未开发的代码块
23.
批量选中sql文件-》右键run....->选择目标数据库
24.
ctrl+e寻找最近文件
25.
SpringBoot项目初始化时，添加spring configurarion processor
可实现yml文件配置提示


22.
有些人可能SpringMVC基础不扎实，这里帮助大家小结一下参数的格式：
1、早期的前端数据提交都是http://hostName:port/path?key1=value1&key2=value2，如果是这种key=value格式的，则在controller里面只需要声明形参即可，不需要加任何注解。如果是post请求，请求体是key=value这种格式的，其实接收方法是一样的。与此同时这种格式在请求头里面体现为：content-type=application/x-www-form-urlencoded。
2、后来人们提出了json格式，如果请求为post且格式为json，则你声明的形参为entity或map时需要添加@RequstBody注解。与此同时这种格式在请求头里面体现为：content-type=application/json。
3、后来人们又提出了restful风格的api，他的格式为http://hostName:port/path/value1/value2，此时你声明的形参需要添加@PathVariable。
现在主流的参数提交就这几种格式，希望能够帮助大家不要混淆。